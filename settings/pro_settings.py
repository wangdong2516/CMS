"""
Django settings for CMS project.

Generated by 'django-admin startproject' using Django 3.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
APPS_DIR = BASE_DIR / 'CMS'
env = environ.Env()

READ_DOT_ENV_FILE = env.bool('DJANGO_READ_DOT_ENV_FILE', default=False)
if READ_DOT_ENV_FILE:
    env.read_env(BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '3x8+nb^(qy&sf#4h=+9o&pke4l)+*g05u#1kfg@oi)8n8cs6l2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool('DEBUG', False)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    # Django的用户认证系统框架
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.sites',
    'django.contrib.staticfiles',
    'guardian',
    # user应用
    'user.apps.UserConfig',
    # 注册自定义的Django命令
    'utils',
    'position',
    'rest_framework',
    'cid.apps.CidAppConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.github',
    'tools'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'cid.middleware.CidMiddleware',
    'utils.middleware.RequestMixinMiddleware',
    'utils.middleware.LoggerMiddleware',

]

ROOT_URLCONF = 'CMS.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'CMS.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# 多数据库: https://docs.djangoproject.com/zh-hans/3.1/topics/db/multi-db/
# django的default数据库必须设置，没有数据库可以使用的时候，默认使用的是default数据库

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'CMS',
        'USER': 'root',
        'PASSWORD': '1277431229',
        'PORT': 3306,
        # 指定存储引擎
        'STORAGE_ENGINE': 'INNODB',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",  # 设置sql模式为严格模式，这种情况下，一些警告将会升级为错误
            'charset': 'utf8mb4'  # 指定使用的字符集
        }
    },
    'other': {
        'ENGINE':  'django.db.backends.mysql',
        'NAME': 'CMS_SPIDER',
        'USER': 'root',
        'PASSWORD': '1277431229',
        'PORT': 3306,
        'STORAGE_ENGINE': 'INNODB',
        'OPTIONS': {
            'init_command': 'SET sql_model="STRICT_TRANS_TABLES"',
            'charset': 'utf8mb4'
        }
    }
}
#
DATABASES_APPS_MAPPING = {
    'user': 'default',
    'position': 'other',
}

# 数据库路由
DATABASE_ROUTERS = ['utils.database_router.DatabaseAppsRouter']

# Redis缓存配置
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://127.0.0.1:6379/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'CONNECTION_POOL_KWARGS': {'max_connections': 100}
        }
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/
import os
STATIC_URL = '/static/'
STATICFILES_DIRS = [(os.path.join(BASE_DIR,  'static'))]
# 使用Django框架做登录的时候，调用的是login函数，会在session中设置一个_auth_user_id的key
AUTH_USER_MODEL = 'user.User'

# ----------------------celery配置--------------------------
CELERY_TIMEZONE = 'Asia/Shanghai'
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_TASK_TRACK_STARTED = True
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/1'
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SOFT_TIME_LIMIT = 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# django-cid
# 自动生成cid
CID_GENERATE = True
AUTHENTICATION_BACKENDS = [
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

# RESTFRAMEWORK
REST_FRAMEWORK = {

}


# 日志系统 logger --> handler --> filter -->  formatter
LOGGING = {
    'version': 1,
    # 是否禁止默认配置的记录器
    'disable_existing_loggers': False,

    # 记录器,django.db.backends是Django数据库默认使用的日志名
    'loggers': {
        'django.db.backends': {
            'handlers': ['console', ],
            'level': 'INFO',
            'propagate': False
        },

        # django请求日志，仅记录4XX和5XX的日志
        'django.request': {
            'handlers': ['request', ],
            'level': 'DEBUG',
            'propagate': False
        },
        'my_log': {
            'level': 'INFO',
            'handlers': ['my_log', ],
            'propagate': False
        }
    },

    'handlers': {
        'request': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '/Users/wangdong/Desktop/Learn/practice/CMS/logs/request.log',
            'formatter': 'standard',
            'filters': ['request_info']
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        'my_log': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/Users/wangdong/Desktop/Learn/practice/CMS//logs/info.log',
        }
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG'
    },
    # 日志格式化
    'formatters': {
        'standard': {
            'format': '{"time": "%(asctime)s", "level": "%(levelname)s", "request_id": %(request_id)s, "user_id": %(user_id)s, "path": "%(path)s", "method": "%(method)s", "func": "%(module)s.%(funcName)s:%(lineno)d",  "message": "%(message)s", "status_code": %(status_code)s, "response": %(response)s, "spend_time": %(spend_time)ss}',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },

    # 过滤器
    'filters': {
        'request_info': {'()': 'utils.log_filter.RequestLogFilter'},
    },
}